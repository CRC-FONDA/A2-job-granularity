configfile: "config.yaml"
import time
import csv
from collections import defaultdict

num_bins = 0 # will be read implicitly from the bins file
bins = defaultdict(lambda: [])
nodes = defaultdict(lambda: [])

with open("data/bins.tsv", "r") as f:
    reader = csv.reader(f, delimiter='\t')

    for row in reader:
        filename = row[0]
        bin_id = int(row[1])
        nodename = row[2]
        bins[bin_id].append(filename)
        nodes[bin_id].append(nodename)
        num_bins = max(num_bins, bin_id + 1)
        nodes[bin_id].append(nodename)

if list(range(num_bins)) != list(bins.keys()):
    raise RuntimeError("Error bins.tsv")

bin_ids = range(num_bins)

genome_bin_files = expand("data/genome_bins/bin_{bin_id}.fasta", bin_id=bin_ids)
distributed_read_files = expand("data/distributed_reads/bin_{bin_id}.fastq", bin_id=bin_ids)

rule all:
    input:
        expand("data/mapped_reads/bin_{bin_id}.sam", bin_id=bin_ids)
        # "data/mapped_reads/all.bam"

# TODO: something like this
# rule cplex_model:
#     input:
#         "all the genomes"
#     output:
#         "bins.tsv"

#create one fasta file out of the fasta files in the bin
rule create_bin_file:
    input:
        lambda wildcards: bins[int(wildcards.bin_id)]
    output:
        temp("data/genome_bins/bin_{bin_id}.fasta")
    shell:
        "cat {input} > {output}"

num_threads = config["threads"]

include: "modules/prefilter.smk"
include: "modules/readmapping.smk"
# include: "modules/postprocessing.smk"